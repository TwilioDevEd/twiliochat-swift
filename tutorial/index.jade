.chapter(data-title='Twilio Chat Swift')
  .step(data-title='Introduction',
        data-file='twiliochat/AppDelegate.swift',
        data-mode="swift")
    :markdown
      ## Introduction

      Ready to implement a chat application using Twilio Chat Client?
      Here is how it works at a high level:

      1. [Programmable Chat](//www.twilio.com/chat) is the core product
      we'll be using to handle all the chat functionality.

      1. We use a server side app to generate [user access
      tokens](//www.twilio.com/docs/api/chat/guides/identity#server-create-an-access-token) which contains
      all your Twilio account information. The Programmable Chat Client uses this token
      to connect with the API.

      1. [Twilio Access Manager](//media.twiliocdn.com/sdk/ios/common/releases/0.3.4/docs/Classes/TwilioAccessManager.html)
      is the part of the SDK than handles access tokens and even refreshes them upon token
      expiration.

      ---

      **See Also:**
      * [Programmable Chat API](//www.twilio.com/docs/api/chat)
      * [iOS QuickStart](//www.twilio.com/docs/api/chat/guides/quickstart-ios)
      * [Channels and Messages](//www.twilio.com/docs/api/chat/guides/channels)
      * [User Identity & Access Tokens](//www.twilio.com/docs/api/chat/guides/identity)
      * [Twilio Chat Client Reference](//media.twiliocdn.com/sdk/ios/chat/releases/0.16.0/docs/)
      * [Twilio Access Manager Reference](//media.twiliocdn.com/sdk/ios/accessmanager/releases/0.1.2/docs/)

  .step(data-title='Initializing the Client',
        data-file='twiliochat/MessagingManager.swift',
        data-highlight='92-124',
        data-mode="swift")
    :markdown
      ## Initializing the Programmable Chat Client

      The only thing you need to create a client is an access token. This token
      holds information about your Twilio account and Programmable Chat API keys. We have created a web
      version of Twilio chat in different languages. You can use any of these to generate the token:

      * [PHP - Laravel](//github.com/TwilioDevEd/twiliochat-laravel)
      * [C# - .NET MVC](//github.com/TwilioDevEd/twiliochat-csharp)
      * [Java - Servlets](//github.com/TwilioDevEd/twiliochat-servlets)
      * [JS - Node](//github.com/TwilioDevEd/twiliochat-node)

  .step(data-title='Synchronizing the Client',
        data-file='twiliochat/MessagingManager.swift',
        data-highlight='145-158',
        data-mode="swift")
    :markdown
      ## Synchronizing the Programmable Chat Client

      In the previous step we initialized the
      [Programmable Chat client](//media.twiliocdn.com/sdk/ios/chat/releases/0.16.0/docs/Classes/TwilioChatClient.html)
      with an [Access Manager](//media.twiliocdn.com/sdk/ios/accessmanager/releases/0.1.2/docs/Classes/TwilioAccessManager.html)
      and set the client's delegate to the shared instance of our `MessagingManager`.

      The `synchronizationStatusChanged`
      [delegate](//media.twiliocdn.com/sdk/ios/chat/releases/0.16.0/docs/Protocols/TwilioChatClientDelegate.html)
      method will allow us to know when the client has loaded all the required information.
      You can change the default initialization values for the client using a
      [TwilioChatClientProperties](//media.twiliocdn.com/sdk/ios/chat/releases/0.16.0/docs/Classes/TwilioChatClientProperties.html)
      instance as the `options` parameter in the previews step.

      We need the client to be synchronized before trying to get the channel list (next step).
      Otherwise, calling [client.channelsList()](//media.twiliocdn.com/sdk/ios/chat/releases/0.16.0/docs/Classes/TwilioChatClient.html#//api/name/channelsList)
      will return `nil`.

  .step(data-title='Getting the Channel List',
        data-file='twiliochat/ChannelManager.swift',
        data-highlight='73-90',
        data-mode="swift")
    :markdown
      ## Getting the Channel List

      Our `ChannelManager` class takes care of everything related to channels.
      In the previous step, we waited for the client to synchronize channel information,
      and assigned an instance of
      [TCHChannels](//media.twiliocdn.com/sdk/ios/chat/releases/0.16.0/docs/Classes/TCHChannels.html)
      to our `ChannelManager`. Now we must get an actual array of channels using
      the `userChannels()` method.

  .step(data-title='Listen to Client Events',
        data-file='twiliochat/ChannelManager.swift',
        data-highlight='117-145',
        data-mode="swift")
    :markdown
      ## Listen to Client Events

      The Programmable Chat Client will trigger events such as `channelAdded` or `channelDeleted`
      on our application. Given the creation or deletion of a channel, we'll reload the
      channel list in the reveal controller. If a channel is deleted and we were currently joined to that
      channel, the application will automatically join the general channel.

      `ChannelManager` is a `TwilioChatClientDelegate`. In this class we
      implement the delegate methods, but we also allow `MenuViewController`
      class to be a delegate of ChannelManager, so it can listen to client events too.

      ---

      **See Also:**
      * [TwilioChatClientDelegate Protocol Reference](//media.twiliocdn.com/sdk/ios/chat/releases/0.16.0/docs/Protocols/TwilioChatClientDelegate.html)

  .step(data-title='Join the General Channel',
        data-file='twiliochat/ChannelManager.swift',
        data-highlight='20-73',
        data-mode="swift")
    :markdown
      ## Join the General Channel

      This application will try to join a channel called "General Channel" when it starts.
      If the channel doesn't exist, it'll create one with that name. The scope of
      this example application will show you how to work only with public channels,
      but the Programmable Chat client allows you to create private channels and handle
      invitations.

      Once you have joined a channel, you can register a class as the `TCHChannelDelegate`
      so you can start listening to events such as `messageAdded` or `memberJoined`.
      We'll show you how to do this in the next step.

  .step(data-title='Listen to Channel Events',
        data-file='twiliochat/MainChatViewController.swift',
        data-highlight='223-256',
        data-mode="swift")
    :markdown
      ## Listen to Channel Events

      We registered `MainChatViewController` as the `TCHChannelDelegate`, and here
      we implemented the following methods that listen to channel events:

      * `messageAdded`: When someone sends a message to the channel you are connected to.
      * `channelDeleted`: When someone deletes a channel.
      * `memberJoined`: When someone joins the channel.
      * `memberLeft`: When someone leaves the channel.
      * `synchronizationStatusChanged`: When channel synchronization status changes.

      As you may have noticed, each one of these methods include useful objects
      as parameters. One example is the actual message that was added to the channel.

  .step(data-title='Joining Other Channels',
        data-file='twiliochat/MainChatViewController.swift',
        data-highlight='130-151',
        data-mode="swift")
    :markdown
      ## Joining Other Channels

      The application uses [SWRevealViewController](//github.com/John-Lluch/SWRevealViewController)
      to show a sidebar that contains a list of the channels created for that Twilio account.

      When you tap on the name of a channel from the sidebar, that channel is set
      on the `MainChatViewController`. The `joinChannel` method takes care of joining
      to the selected channel and loading the messages.

  .step(data-title='Creating a Channel',
        data-file='twiliochat/ChannelManager.swift',
        data-highlight='101-119',
        data-mode="swift")
    :markdown
      ## Creating a Channel

      We use an input dialog so the user can type the name of the new channel.
      The only restriction here is that the user can't create a channel called
      "General Channel". Other than that, creating a channel is as simple as calling
      `createChannel` and passing a dictionary with the new channel information.

  .step(data-title='Deleting a Channel',
        data-file='twiliochat/MenuViewController.swift',
        data-highlight='155-178',
        data-mode="swift")
    :markdown
      ## Deleting a Channel

      Deleting a channel is easier than creating one. We'll use the `UITableView`
      ability to delete a cell. Once you have figured out what channel is meant
      to be deleted (from the selected cell index path), deleting it is as simple
      as calling the channel's method `destroy`.

  .step(data-title='Where to Next?')
    :markdown
      ## Where to Next?

      That's it! We've just implemented a simple chat application using Swift.
      If you are an iOS developer working with Twilio, you might want
      to check out these other projects:

      [**Client Quickstart**](//github.com/TwilioDevEd/client-quickstart-swift)

      Twilio Client for iOS Quickstart using Swift

      [**Notifications Quickstart**](//github.com/TwilioDevEd/notifications-quickstart-swift)

      Twilio Notifications for iOS Quickstart using Swift

      ## Did this help?

      Thanks for checking this tutorial out! If you have any feedback to share with us,
      we'd love to hear it. [Contact the Twilio Developer Education Team](mailto:deved-oss@twilio.com)
      to let us know what you think.
